services:

  accounts-api:
    build:
      context: ./src/
      dockerfile: ./Account.Dockerfile
    ports:
      - "5005:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - BANK_TRANSACTION_BASE_ADDRESS=http://transactions-api:8080
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - ACCOUNT_DB_CONNECTION_STRING=Host=account-db;Database=account;Username=admin;Password=admin
      - MESSAGE_QUEUE_HOST=kafka:9092
    networks:
      - banknet
    depends_on:
      account-db:
        condition: service_healthy

  transactions-api:
    build:
      context: ./src/
      dockerfile: ./Transaction.Dockerfile
    ports:
      - "5006:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - BANK_ACCOUNT_BASE_ADDRESS=http://accounts-api:8080
      - LIMIT_AMOUNT_TRANSFER=10000 
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - TRANSACTION_DB_CONNECTION_STRING=mongodb://admin:admin@transaction-db:27017/transaction?authSource=admin
      - TRANSACTION_DATABASE=transaction
      - MESSAGE_QUEUE_HOST=kafka:9092
    networks:
      - banknet
    depends_on:
      - transaction-db

  transactions-consumer:
    build:
      context: ./src/
      dockerfile: ./Transaction.Consumer.Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - BANK_ACCOUNT_BASE_ADDRESS=http://accounts-api:8080
      - LIMIT_AMOUNT_TRANSFER=10000 
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - TRANSACTION_DB_CONNECTION_STRING=mongodb://admin:admin@transaction-db:27017/transaction?authSource=admin
      - TRANSACTION_DATABASE=transaction
      - MESSAGE_QUEUE_HOST=kafka:9092
    networks:
      - banknet
    depends_on:
      - transaction-db
      - kafka

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - banknet
    
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 29092:29092
    environment:
      CLUSTER_ID: 1
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: execute-transaction:1:1
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
    networks:
      - banknet

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    depends_on:
      - kafka
    ports:
      - 19000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
    networks:
      - banknet

# OTEL Collector to receive logs, metrics and traces from the application
  otel-collector:
    image: otel/opentelemetry-collector:latest
    command: [ "--config=/etc/otel-collector.yaml" ]
    volumes:
      - ./.docker/telemetry/otel-collector.yaml:/etc/otel-collector.yaml
    ports:
      - "4317:4317"
      - "4318:4318"
      - "8889:8889"
    networks:
      - banknet

  # Exports Traces to Tempo
  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./.docker/telemetry/tempo.yaml:/etc/tempo.yaml
      - ./.docker/telemetry/tempo-data:/tmp/tempo
    ports:
      - "3200"  # tempo
      - "4317"  # otlp grpc
      - "4318"  # otlp http
    networks:
      - banknet

# Exports Metrics to Prometheus
  prometheus:
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus.yaml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
    volumes:
      - ./.docker/telemetry/prometheus.yaml:/etc/prometheus.yaml
    ports:
      - "9090:9090"
    networks:
      - banknet

  loki:
    image: grafana/loki:latest
    command: [ "-config.file=/etc/loki-config.yaml" ]
    volumes:
      - ./.docker/telemetry/loki-config.yaml:/etc/loki-config.yaml
      - ./.docker/telemetry/loki-data:/tmp/loki
    ports:
      - "3100:3100"
    networks:
      - banknet

# UI to query traces and metrics
  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./.docker/telemetry/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    ports:
      - "3000:3000"
    networks:
      - banknet

  openobserve:
    image: public.ecr.aws/zinclabs/openobserve:latest
    restart: unless-stopped
    ports:
      - "5080:5080"
    environment:
      - ZO_ROOT_USER_EMAIL=root@example.com
      - ZO_ROOT_USER_PASSWORD=Complexpass#123
    volumes:
      - openobserve-data:/data
    networks:
      - banknet

  # Postgres account db
  account-db:
    image: postgres:latest
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=bank
    ports:
      - "5432:5432"
    volumes:
      - account-db-data:/var/lib/postgresql/data
      - .databases/account-db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    networks:
      - banknet

  # Mongo transaction db
  transaction-db:
    image: mongo:latest
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_DATABASE=transaction
    ports:
      - "27017:27017"
    volumes:
      - transaction-db-data:/data/db
      - .databases/transaction-db/init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - banknet

volumes:
  account-db-data:
  transaction-db-data:
  openobserve-data:

networks:
  banknet:
    driver: bridge